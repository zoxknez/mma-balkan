// Frontend Prisma schema - links to backend
// This is a copy of backend/prisma/schema.prisma for frontend NextAuth.js

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:../backend/prisma/dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId      String
  expires    DateTime
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model with MMA-specific fields
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based authentication
  username      String?   @unique
  bio           String?
  country       String?
  countryCode   String?
  birthDate     DateTime?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // MMA-specific relations (placeholder for full schema in backend)
  followedFighters FighterFollow[]
  followedClubs    ClubFollow[]
  watchlist        UserWatchlist[]
  predictions      Prediction[]
  comments         Comment[]
  likes            Like[]
  posts            Post[]
  notifications    Notification[]
  activities       Activity[]
  stats            UserStats?
}

// Simplified models for frontend (full definitions in backend)
model UserStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctPredictions Int    @default(0)
  totalPredictions   Int    @default(0)
  points            Int      @default(0)
  rank              Int?
  streak            Int      @default(0)
  bestStreak        Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FighterFollow {
  id        String   @id @default(cuid())
  userId    String
  fighterId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fighter   Fighter  @relation(fields: [fighterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, fighterId])
}

model ClubFollow {
  id      String   @id @default(cuid())
  userId  String
  clubId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club    Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, clubId])
}

model UserWatchlist {
  id      String   @id @default(cuid())
  userId  String
  eventId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Prediction {
  id        String   @id @default(cuid())
  userId    String
  fightId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fight     Fight    @relation(fields: [fightId], references: [id], onDelete: Cascade)
  predictedWinnerId String
  method    String?
  round     Int?
  confidence Int     @default(5)
  points    Int?
  isCorrect Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, fightId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Int       @default(0)
  isEdited  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  newsId    String?
  news       News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  fightId   String?
  fight     Fight?   @relation(fields: [fightId], references: [id], onDelete: Cascade)

  likesRelation Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  newsId    String?
  news      News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@unique([userId, newsId])
  @@unique([userId, postId])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  imageUrl  String?
  likes     Int      @default(0)
  shares    Int      @default(0)
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likesRelation Like[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  String
  data      String?
  createdAt DateTime @default(now())
}

model Club {
  id        String   @id @default(cuid())
  name      String
  city      String
  country   String
  address   String?
  website   String?
  phone     String?
  members   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers ClubFollow[]
}

model Fighter {
  id          String   @id @default(cuid())
  name        String
  nickname    String?
  country     String
  countryCode String
  birthDate   DateTime?
  heightCm    Int?
  weightKg    Int?
  weightClass String
  reachCm     Int?
  stance      String?
  wins        Int      @default(0)
  losses      Int      @default(0)
  draws       Int      @default(0)
  koTkoWins   Int      @default(0)
  submissionWins Int   @default(0)
  decisionWins Int     @default(0)
  isActive    Boolean  @default(true)
  lastFight   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  redFights   Fight[]  @relation("RedFighter")
  blueFights  Fight[]  @relation("BlueFighter")
  followers   FighterFollow[]
}

model Event {
  id        String   @id @default(cuid())
  name      String
  startAt   DateTime
  status    String
  city      String
  country   String
  mainEvent String?
  ticketsAvailable Boolean @default(false)
  fightsCount Int @default(0)
  attendees  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fights    Fight[]

  watchlist UserWatchlist[]
  comments  Comment[]
}

model News {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  excerpt    String?
  content    String
  category   String
  authorName String
  imageUrl   String?
  featured   Boolean  @default(false)
  trending   Boolean  @default(false)
  views      Int      @default(0)
  likes      Int      @default(0)
  publishAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  comments   Comment[]
  likesRelation Like[]
}

model Fight {
  id              String   @id @default(cuid())
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id])
  orderNo         Int      @default(1)
  section         String   @default("PRELIMS")
  weightClass     String?
  status          String   @default("SCHEDULED")
  redFighterId    String
  blueFighterId   String
  redFighter      Fighter  @relation("RedFighter", fields: [redFighterId], references: [id])
  blueFighter     Fighter  @relation("BlueFighter", fields: [blueFighterId], references: [id])
  winnerFighterId String?
  method          String?
  round           Int?
  time            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  predictions     Prediction[]
  comments        Comment[]
}

